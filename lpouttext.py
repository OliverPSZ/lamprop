# -*- coding: utf-8 -*-
# Text output routines for lamprop.
#
# Copyright Â© 2011 R.F. Smith <rsmith@xs4all.nl>. All rights reserved.
# Time-stamp: <2011-03-27 18:15:24 rsmith>
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import lptypes
import lpver

def engprop(l, nm):
    print "Generated by {0} {1}".format(lpver.name, lpver.version)
    print "laminate: {0}".format(nm)
    print "thickness: {0:g} mm, density {1:4.2f} gr/cm3".format(l.thickness, 
                                                                l.density)
    s = "fiber volume fraction {0:.1f}%, fiber weight fraction {1:.1f}%"
    print s.format(l.vf*100, l.wf*100)
    s = "laminate weight: {0:g} gr/m2, resin consumption: {1:g} gr/m2"
    print s.format(l.weight+l.rc, l.rc)
    print "num weight angle fiber"
    for ln,la in enumerate(l.layers):
        print "{0:3} {1:6g} {2:5g} {3}".format(ln+1, la.weight, la.angle, 
                                               la.fiber.name)
    print "E_x  = {0:g} MPa".format(l.Ex)
    print "E_y  = {0:g} MPa".format(l.Ey)
    print "G_xy = {0:g} MPa".format(l.Gxy)
    print "v_xy = {0:g}".format(l.Vxy)
    print "v_yx = {0:g}".format(l.Vyx)
    print "cte_x = {0:g} cte_y = {1:g}".format(l.cte_x, l.cte_y)

def matrices(l, nm, printheader):
    if printheader == True:
        print "Generated by {0} {1}".format(lpver.name, lpver.version)
        print "laminate: {0}".format(nm)
    print "ABD matrix:"
    matstr = "|{:6.0f} {:6.0f} {:6.0f} {:6.0f} {:6.0f} {:6.0f}|"
    for n in range(0,6):
        print matstr.format(l.ABD[n,0], l.ABD[n,1], l.ABD[n,2], 
                            l.ABD[n,3], l.ABD[n,4], l.ABD[n,5])
    matstr = "|{:10g} {:10g} {:10g} {:10g} {:10g} {:10g}|"
    print "abd matrix:"
    for n in range(0,6):
        print matstr.format(l.abd[n,0], l.abd[n,1], l.abd[n,2], 
                            l.abd[n,3], l.abd[n,4], l.abd[n,5])
